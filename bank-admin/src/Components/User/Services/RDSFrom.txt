import React, { useState, useContext, useEffect } from "react";
import { Modal, Button, Container, Form } from "react-bootstrap";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faEdit, faPrint, faArrowLeft, faArrowRight, faClockRotateLeft } from "@fortawesome/free-solid-svg-icons";
import { Table } from "react-bootstrap";
import { faPlus } from "@fortawesome/free-solid-svg-icons";
import "../../style/Rd.css";
import axios from "axios";
import Nav from "../../Others/Nav";
import { UserContext } from "../../Others/UserContext";
import { Link } from "react-router-dom";
import html2canvas from "html2canvas";
import jsPDF from "jspdf";
import numberToWords from "number-to-words";

const Rds = () => {
  // current Date and Time
  const [branchCode, setBranchCode] = useState('');
  const [selectedRow, setSelectedRow] = useState(null);
  const [allRDSdata, setAllRDSdata] = useState([]);
  const { user } = useContext(UserContext);
  const [searchReceipt, setSearchReceipt] = useState('');
  const [receiptData, setReceiptData] = useState(null);
  const [currentDate, setCurrentDate] = useState(new Date());
  const [newRDSdata, setNewRDSdata] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [currentPage, setCurrentPage] = useState(1); // Track current page
  const [nextPage, setNextPage] = useState(null);
  const [pageSize, setPageSize] = useState(10);
  const [searchTerm, setSearchTerm] = useState('');
  const [showDropdown, setShowDropdown] = useState(false);

  useEffect(() => {
    const intervalId = setInterval(() => {
      setCurrentDate(new Date());
    }, 1000);
    return () => clearInterval(intervalId);
  }, []);

  const handleRowClick = (rdsData) => {
    setSelectedRow(rdsData);

  }
  //history
  const [showModalHisto, setShowModalHisto] = useState(false);
  const toggleModalHisto = () => {
    setShowModalHisto(!showModalHisto);
  };
  const handleCloseModalHisto = () => {
    setShowModalHisto(false);
  };

  //Edit modal
  const handleCloseModal = () => {
    setSelectedRow(false);
    setShowModal(false);
  };

  // Reference name
  const [employees, setEmployees] = useState([]);
  useEffect(() => {
    fetchEmployees();
  }, []);

  const fetchEmployees = async () => {
    try {
      const response = await fetch('http://localhost:2000/api/employee');
      const data = await response.json();

      const branchCode = user?.branchDetails?.branchCode;
      if (branchCode) {

        const filteredEmployees = data.filter(employee => employee.branchCode === branchCode);
        setEmployees(filteredEmployees);
      } else {
        setEmployees(data);
      }
      // console.log(data);
    } catch (error) {
      console.error('Error fetching employees:', error);
    }
  };
  //Generate RDS Number

  const [formData, setFormData] = useState({
    RDSNumber: '',
    customerName: '',
    customerNumber: '',
    accountType: '',
    amount: '',
    membershipId: '',
    date: '',
    referenceName: '',
    address: '',
    rdsBill: '',
    branchcode: user?.branchDetails?.branchCode,
  });

  const [accountTypeCounts, setAccountTypeCounts] = useState({});
  const [rdsBillCount, setRdsBillCount] = useState(0);

  const updateRDSNumber = (branchCode) => {
    let accountType = formData.accountType || "RDS";

    if (!accountTypeCounts[accountType]) {
      setAccountTypeCounts(prevCounts => ({
        ...prevCounts,
        [accountType]: 1,
      }));
    } else {
      setAccountTypeCounts(prevCounts => ({
        ...prevCounts,
        [accountType]: prevCounts[accountType] + 1,
      }));
    }

    const newRDSNumber = `${accountType}${branchCode}${(accountTypeCounts[accountType] || 1).toString().padStart(5, '0')}`;
    const newRdsBill = `RDS${(rdsBillCount + 1).toString().padStart(8, '0')}`;

    setFormData(prevFormData => ({
      ...prevFormData,
      RDSNumber: newRDSNumber,
      rdsBill: newRdsBill,
      accountType: formData.accountType,
    }));
    setRdsBillCount(prevCount => prevCount + 1);
  };

  useEffect(() => {
    const branchCode = user?.branchDetails?.branchCode;
    if (formData.accountType && branchCode) {
      updateRDSNumber(branchCode);
    }
  }, [formData.accountType, user?.branchDetails?.branchCode]);

  const [showModal, setShowModal] = useState(false);

  const handlePlusIconClick = () => {
    setShowModal(true);
  };
  // DATA FETCHING-------------------------------------------------
  const branch = user?.branchDetails?.branchCode;
  useEffect(() => {

    fetchRDSData(currentPage, pageSize, branch, searchReceipt);
  }, [currentPage, pageSize, branch, searchReceipt]);


  const fetchRDSData = async (page, size, branch, searchTerm = '', searchReceipt = '') => {
    try {
      setIsLoading(true);
      const response = await axios.get(`http://localhost:2000/api/RDSdata?page=${page}&limit=${size}&branch=${branch}&searchTerm=${searchTerm}&searchReceipt=${searchReceipt}`);
      setNewRDSdata(response.data.data);
      setAllRDSdata(response.data.data);
      setNextPage(response.data.nextPage);
    } catch (error) {
      console.error('Error fetching memberships data:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSearch = (e) => {
    const value = e.target.value;
    setSearchTerm(value);
    fetchRDSData(1, pageSize, branch, value)
  };

  const handleNextPage = () => {
    if (nextPage) {
      setCurrentPage(currentPage + 1);
      fetchRDSData(currentPage + 1, pageSize, branch, searchTerm);
    }
  };

  const handlePreviousPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1);
      fetchRDSData(currentPage - 1, pageSize, branch, searchTerm);
    }
  };

  const handlePageSizeChange = (e) => {
    const newSize = parseInt(e.target.value, 10);
    setPageSize(newSize);
    setCurrentPage(1);
    fetchRDSData(1, newSize, branch, searchTerm);
  };
  //------------------------------------------------------------------------------

  const [showModalReceipt, setShowModalReceipt] = useState(false);

  const handleButtonClick = () => {
    setShowModalReceipt(true);
  };

  const handleClose = () => {
    setShowModalReceipt(false);
    setShowModalWithdrawReceipt(false);
  };

  const handlePrintReceipt = () => {
    const input = document.getElementById("receipt-print");

    html2canvas(input).then((canvas) => {
      const pdf = new jsPDF("p", "mm", "a4");
      const imgData = canvas.toDataURL("image/png");
      const imgWidth = 180; // Adjust the width as needed
      const imgHeight = 130; // Half of A4 page height in mm

      // Set minimum height for the table image
      const minHeight = 50; // Adjust as needed
      const tableHeight = Math.max(imgHeight, minHeight);

      // Calculate margin to center horizontally
      const marginX = (210 - imgWidth) / 2; // A4 page width is 210mm

      // Calculate startY to position the table at the top of the page
      const startY = 10; // Adjust as needed

      // Add the image to the PDF
      pdf.addImage(imgData, "PNG", marginX, startY, imgWidth, tableHeight);

      // Save or print the PDF
      pdf.autoPrint(); // Automatically opens the print dialog
      window.open(pdf.output("bloburl"), "_blank"); // Opens the PDF in a new tab
    });
  };

  const handleMobileSelect = (value) => {
    fetchReceiptData(value);
    setSearchReceipt('');
  };
  const fetchReceiptData = (mobile) => {
    const filteredCustomers = allRDSdata.filter(
      (customer) => customer.customerNumber === mobile
    );
    if (filteredCustomers.length > 0) {
      setReceiptData(filteredCustomers[0]);
    } else {
      setReceiptData(null);
    }
  };
  const [showModalWithdrawReceipt, setShowModalWithdrawReceipt] = useState(false);
  const handleButtonClickWithdraw = () => {
    setShowModalWithdrawReceipt(true);
  };
  function formatIndianNumber(amount) {
    // Parse the amount into a number
    const numericAmount = parseFloat(amount);

    // Check if numericAmount is not a finite number or is NaN
    if (!Number.isFinite(numericAmount) || isNaN(numericAmount)) {
      return "Invalid amount";
    }

    // Proceed with the rest of the logic
    if (numericAmount < 100000) {
      // For amounts less than 1 lakh, use regular conversion
      return numberToWords.toWords(numericAmount);
    }

    // For amounts greater than or equal to 1 lakh
    const lakhs = Math.floor(numericAmount / 100000);
    const remaining = numericAmount % 100000;
    const lakhsInWords = lakhs > 1 ? numberToWords.toWords(lakhs) + " Lakhs" : "One Lakh";

    if (remaining === 0) {
      return lakhsInWords;
    }

    const remainingInWords = numberToWords.toWords(remaining);
    return `${lakhsInWords} ${remainingInWords}`;
  }
  function AmountInWords({ amount }) {
    const amountInWords = formatIndianNumber(amount);

    return <p><b>In words:</b> {amountInWords} only</p>;
  }

  const [historyData, setHistoryData] = useState([]);
  const [hisPageSize, setHisPageSize] = useState(10);
  const [nextHisPage, setNextHisPage] = useState(false);
  const [currentHisPage, setCurrentHisPage] = useState(1);

  useEffect(() => {
    fetchHistoryData(currentHisPage, hisPageSize, branch);
  }, [currentHisPage, hisPageSize, branch]);

  const fetchHistoryData = async (currentHisPage, size, branch, searchTerm = '') => {
    try {
      const response = await fetch(`http://localhost:2000/api/rdsHistory?currentHisPage=${currentHisPage}&limit=${size}&branch=${branch}&searchTerm=${searchTerm}`);
      const data = await response.json();
      setHistoryData(data.data);
      setNextHisPage(data.nextPage);
      console.log(data);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  const handleHistorysearch = (e) => {
    const value = e.target.value;
    setSearchTerm(value);
    fetchHistoryData(1, hisPageSize, branch, value)
  };

  const handleNextHistoryPage = () => {
    if (nextHisPage) {
      setCurrentHisPage(currentHisPage + 1);
      fetchHistoryData(currentHisPage + 1, hisPageSize, branch, searchTerm);
    }
  };

  const handlePreviousHistoryPage = () => {
    if (currentHisPage > 1) {
      setCurrentHisPage(currentHisPage - 1);
      fetchHistoryData(currentHisPage - 1, hisPageSize, branch, searchTerm);
    }
  };

  const handleHistoryPageSizeChange = (e) => {
    const newSize = parseInt(e.target.value, 10);
    setHisPageSize(newSize);
    setCurrentHisPage(1);
    fetchHistoryData(1, newSize, branch, searchTerm);
  };

  const [numberData, setNumberData] = useState('');
  const [searchNumber, setSearchNumber] = useState('');

  useEffect(() => {
    fetchMemberships(currentPage, pageSize, branchCode, searchNumber);
    console.log(branchCode);
  }, [currentPage, pageSize, branchCode, searchNumber]);

  const fetchMemberships = async (page, size, branchCode, selectedNumber = '') => {
    try {
      setIsLoading(true);
      const response = await axios.get(`http://localhost:2000/api/membership?page=${page}&limit=${size}&branchCode=${branchCode}&selectedNumber=${selectedNumber}`);
      setNumberData(response.data.data);
    } catch (error) {
      console.error('Error fetching memberships data:', error);
    } finally {
      setIsLoading(false);
    }
  };
  // Handle form input changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevFormData => ({
      ...prevFormData,
      [name]: value,
      date: currentDate.toLocaleString(),
    }));
  };



  const handleNumberSelect = (value) => {
    fetchData(value);
    setFormData(prevFormData => ({
      ...prevFormData,
      customerNumber: value, // Assuming value is the fetched phone number
    }));
    setSearchNumber(value);
    setShowDropdown(false);
  };

  const fetchData = (mobile) => {
    const filteredCustomers = numberData.filter(
      (customer) => customer.customerMobile === mobile
    );
    if (filteredCustomers.length > 0) {
      setFormData(filteredCustomers[0]);
      setSearchNumber(filteredCustomers[0].customerMobile);
    } else {
      setFormData(null);
    }
  };

  const handleReferenceNameChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
      referenceName: value,
    });
  };

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:2000/api/rds', formData);
      console.log('Form data saved:', response.data);
      window.location.href = ("/rds");
    } catch (error) {
      console.error('Error saving form data:', error);
      // Optionally, you can show an error message to the user
    }
  };


  return (

    <div>
      <div className="container border rounded p-4 mt-4 mb-4">
        <Nav />
        <center>
          <h2>RECCURING DEPOSIT SPECIAL</h2>
        </center>
        <div className="App">
          <div className="container">
            <Link to='/RDSmultiCollection'>
              <div className="circle-button">
                <FontAwesomeIcon icon={faPrint} />
              </div>
            </Link>
          </div>
          <div className="form-group">
            <label>Page size</label>
            <select value={pageSize} onChange={handlePageSizeChange}>
              <option value="10">10</option>
              <option value="20">20</option>
              <option value="50">50</option>
              <option value="100">100</option>
            </select>
          </div>
          <div className="form-group mb-0">
            <label htmlFor="Search" className="mr-2">Search:</label>
            <input
              type="text"
              className="form-control"
              // value={formData.branch}
              onChange={handleSearch}
              placeholder="Enter Search"
              style={{ width: "250px" }} // Adjust the width as needed
            />
          </div>

          <div className="circle-buttons-container">
            <div className="circle-button" onClick={handlePlusIconClick} ><FontAwesomeIcon icon={faPlus} /></div>
            <div className="circle-button"><FontAwesomeIcon icon={faEdit} /></div>
            <div className="circle-button" onClick={toggleModalHisto}>
              <FontAwesomeIcon icon={faClockRotateLeft} />
            </div>
            <div className="circle-button"><FontAwesomeIcon icon={faPrint} /></div>
            <Button
              style={{
                height: "3rem",
                marginTop: "1.3rem",
                backgroundColor: "#35725b",
              }}
              onClick={handleButtonClick}
            >
              Deposit Receipt
            </Button>
            <Button
              style={{
                height: "3rem",
                marginTop: "1.3rem",
                backgroundColor: "#35725b",
              }}
              onClick={handleButtonClickWithdraw}
            >
              Withdraw Receipt
            </Button>

          </div>
        </div>

        <center>
          <div className="table-container">
            {isLoading ? (
              <div className="loading-animation">Loading...</div>
            ) : (
              <Table striped bordered hover>
                <thead>
                  <tr>
                    <th style={{ textAlign: 'center' }}>SL NO</th>
                    <th style={{ textAlign: 'center' }}>RDS JOIN DATE</th>
                    <th style={{ textAlign: 'center' }}>MEMBERSHIP ID</th>
                    <th style={{ textAlign: 'center' }}>CUSTOMER NAME</th>
                    <th style={{ textAlign: 'center' }}>RDS NUMBER</th>
                    <th style={{ textAlign: 'center' }}>REFERENCE NAME</th>
                    <th style={{ textAlign: 'center' }}>BALANCE</th>
                  </tr>
                </thead>

                <tbody>
                  {newRDSdata.map((rdsData) => (
                    <tr key={rdsData._id} onClick={() => handleRowClick(rdsData)} className={selectedRow === rdsData ? 'selected-row' : ''}>
                      <td>{rdsData.sl_no}</td>
                      <td>{rdsData.date}</td>
                      <td>{rdsData.membershipId}</td>
                      <td>{rdsData.customerName}</td>
                      <td>{rdsData.RDSNumber}</td>
                      <td>{rdsData.referenceName}</td>
                      <td>{rdsData.amount}</td>
                    </tr>
                  ))}
                </tbody>

              </Table>
            )}
            <div className="pagination-buttons">
              <Button onClick={handlePreviousPage} disabled={currentPage === 1}><FontAwesomeIcon icon={faArrowLeft} /> Previous</Button>
              <span>Page {currentPage}</span>
              <Button onClick={handleNextPage} disabled={!nextPage}>Next <FontAwesomeIcon icon={faArrowRight} /></Button>
              <select value={pageSize} onChange={handlePageSizeChange}>
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="50">50</option>
                <option value="100">100</option>
              </select>
            </div>
          </div>
        </center>
      </div>

      <Modal
        show={showModal}
        onHide={handleCloseModal}
        dialogClassName="custom-modal-width"
      >
        <Modal.Body className="p-0">
          <div className="Member form">
            <div className="card mt-0">
              <div className=" justify-content-center">
                <div className="">
                  <div className="card mt-0">
                    <div className="card-header text-light">
                      <h4>RDS Registration Form</h4>
                    </div>
                    <div className="card-body">
                      <form onSubmit={handleSubmit}>
                        <div className="row">
                          {/* <div className="container"> */}
                          <div className="col-6">
                            <div className="form-group">
                              <label htmlFor="Customer Phonenumber">
                                Phone Number
                              </label>
                              <Form.Control
                                type="text"
                                placeholder="Search..."
                                style={{ width: "200rem" }}
                                value={searchNumber}
                                onChange={(e) => setSearchNumber(e.target.value)}
                                onFocus={() => setShowDropdown(true)} // Show dropdown on focus
                              />
                              {showDropdown && searchNumber && (
                                <ul className="dropdown-menu2">
                                  {numberData
                                    .filter((customer) =>
                                      customer.customerMobile.toLowerCase().includes(searchNumber.toLowerCase())
                                    )
                                    .map((customer, index) => (
                                      <li key={index} className="dropdown-item" onClick={(e) => { e.stopPropagation(); handleNumberSelect(customer.customerMobile); }}>
                                        {customer.customerName} - {customer.customerMobile}
                                      </li>
                                    ))}
                                </ul>
                              )}

                              {/* <Form.Control
                                type="text"
                                placeholder="Search..."
                                style={{ width: "200rem" }}
                                value={searchNumber}
                                onChange={(e) => setSearchNumber(e.target.value)}
                            />
                            {searchNumber && (
                                <ul className="dropdown-menu2">
                                    {numberData
                                        .filter((customer) =>
                                            customer.customerMobile.toLowerCase().includes(searchNumber.toLowerCase())
                                        )
                                        .map((customer, index) => (
                                            <li key={index} className="dropdown-item" onClick={(e) => { e.stopPropagation(); handleNumberSelect(customer.customerMobile); }}>
                                                {customer.customerName} - {customer.customerMobile}
                                            </li>
                                        ))}
                                </ul>
                            )}
                               */}
                            </div>

                            <div className="form-group">
                              <label htmlFor="accountHolderName">
                                Account Holder Name
                              </label>
                              <input
                                type="text"
                                className="form-control"
                                id="accountHolderName"
                                name="accountHolderName"
                                value={formData.customerName}
                                onChange={handleChange}
                                placeholder="Enter Account Holder Name"
                              />
                            </div>
                            <div className="form-group">
                              <label htmlFor="membershipId">
                                Membership ID*
                              </label>
                              <input
                                type="text"
                                className="form-control"
                                id="membershipId"
                                name="membershipId"
                                value={formData.membershipId}
                                onChange={handleChange}
                                placeholder="Enter Membership ID"
                                required
                              />
                            </div>
                            <div className="form-group">
                              <label className="label">DATE*</label>
                              <div className="form-control">
                                {currentDate.toLocaleString()}
                              </div>
                            </div>
                            <div className="form-group">
                              <label htmlFor="billNumber">Bill Number</label>
                              <input
                                type="text"
                                className="form-control"
                                id="rdsBill"
                                name="rdsBill"
                                value={formData.rdsBill}
                                onChange={handleChange}
                                placeholder="Enter Bill Number"
                                readOnly
                              />
                            </div>

                            <div className="form-group">
                              <label htmlFor="referenceNumber">Branch Code</label>
                              <input
                                type="text"
                                className="form-control"
                                id="branch"
                                name="branchcode"
                                value={formData.branchcode}
                                onChange={handleChange}
                                placeholder="Enter branch"
                                readOnly
                              />
                            </div>

                          </div>

                          <div className="col-6">

                            <div className="form-group">
                              <label htmlFor="accountType">Account Type*</label>
                              <select
                                className="form-control"
                                id="accountType"
                                name="accountType"
                                value={formData.accountType}
                                onChange={handleChange}
                                required
                              >
                                <option>--Select--</option>
                                <option value="RDS"> RDS</option>
                              </select>
                            </div>
                            <div className="form-group">
                              <label htmlFor="rdNumber">RDS NO</label>
                              <input
                                type="text"
                                className="form-control"
                                id="RDSNumber"
                                name="RDSNumber"
                                value={formData.RDSNumber}
                                onChange={handleChange}
                                placeholder="Enter RDS Number"
                              />
                            </div>
                            <div className="form-group">
                              <label htmlFor="amount">Amount</label>
                              <input
                                type="text"
                                className="form-control"
                                id="amount"
                                name="amount"
                                value={formData.amount}
                                onChange={handleChange}
                                placeholder="Enter Amount"
                              />
                            </div>
                            <div className="form-group">



                            </div>
                            <div className="form-group">
                              <label htmlFor="referenceName">
                                Reference Name
                              </label>
                              <select
                                className="form-control"
                                value={formData.referenceName}
                                name="referenceName"
                                onChange={handleReferenceNameChange} // Add onChange event handler
                              >
                                <option value="">Select an employee</option>
                                {employees.map(employee => (
                                  <option key={employee.id} value={employee.employeeName}>{employee.employeeName}</option>
                                ))}
                              </select>


                              <div className="form-group mt-3">
                                <label htmlFor="accountHolderAddress">
                                  Account Holder Address
                                </label>
                                <input
                                  type="text"
                                  className="form-control"
                                  id="address"
                                  name="address"
                                  value={formData.address}
                                  onChange={handleChange}
                                  placeholder="Enter Address"
                                />
                              </div>


                            </div>
                          </div>
                        </div>

                        <div className="form-group ">
                          <button type="submit" className="btn btn-primary">
                            Submit
                          </button>
                          <button
                            type="reset"
                            className="btn btn-secondary m-2"
                          >
                            Reset
                          </button>

                          <Button variant="danger" onClick={handleCloseModal}>
                            Close
                          </Button>
                        </div>
                      </form>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </Modal.Body>
      </Modal>


      <Modal show={showModalReceipt} onHide={handleClose} size="xl">
        <div style={{ position: "relative" }}>
          <Modal.Header closeButton>
            <Modal.Title>Receipt</Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <Form.Label htmlFor="phoneSelect">Search</Form.Label>
            <Form.Control
              type="text"
              placeholder="Search..."
              style={{ width: "15rem" }}
              value={searchReceipt}
              onChange={(e) => setSearchReceipt(e.target.value)}
            />
            {searchReceipt && (
              <ul className="dropdown-menu2">
                {allRDSdata
                  .filter((customer) =>
                    (customer.customerName && customer.customerName.toLowerCase().includes(searchReceipt.toLowerCase())) ||
                    (customer.customerNumber && customer.customerNumber.toLowerCase().includes(searchReceipt.toLowerCase()))
                  )
                  .map((customer, index) => (
                    <li key={index} className="dropdown-item" onClick={(e) => { e.stopPropagation(); handleMobileSelect(customer.customerNumber); }}>
                      {customer.customerName} - {customer.customerNumber}
                    </li>
                  ))}
              </ul>
            )}

            <Button onClick={handlePrintReceipt} style={{ float: "right" }}>
              {" "}
              <FontAwesomeIcon icon={faPrint} />
            </Button>
            <br />
            <br />

            <div id="receipt-print">
              <div style={{ border: "1px solid black" }}>
                <div
                  style={{
                    position: "absolute",
                    top: 0,
                    left: 0,
                    width: "100%",
                    height: "100%",
                    zIndex: "9999",
                    pointerEvents: "none", // Ensure the watermark doesn't interfere with interaction
                    backgroundImage: `url('/logo copy.png')`, // Replace 'path_to_your_watermark_image.jpg' with the path to your image
                    backgroundSize: "85%", // Adjust the background size to fit the content
                    opacity: "0.1", // Adjust the opacity to your preference
                  }}
                ></div>
                <div
                  style={{
                    float: "right",
                    marginRight: "2rem",
                    marginTop: "10rem",
                  }}
                >
                  <p><b>Receipt ID:</b> {receiptData ? receiptData.rdsBill : ""}</p>
                  <p><b>Date:</b> {receiptData ? receiptData.date : ""}</p>

                </div>
                <div style={{ textAlign: "center", marginLeft: "5rem" }}>
                  <img
                    src="/mscs.png"
                    alt="logo"
                    style={{
                      maxWidth: "100%",
                      height: "auto",
                      marginLeft: "9rem",
                    }}
                  />
                  <h3 style={{ marginLeft: "9rem" }}>Recurring Deposit Special Receipt</h3>
                  <p style={{ marginLeft: "9rem" }}>Customer Copy</p>
                </div>
                <div className="ml-5">
                  <p><b>Received From:</b>   {receiptData ? receiptData.customerName : ""} </p>
                  <p><b>Address: </b>   {receiptData ? receiptData.address : ""} </p>
                  <p><b>Account Number: </b>    {receiptData ? receiptData.RDSNumber : ""}</p>
                </div>
                <Container>
                  <Table striped hover>
                    <thead>
                      <tr>
                        <td colSpan={4} style={{ textAlign: "center" }}>
                          <b>Deposit Information</b>
                        </td>
                      </tr>
                      <tr>
                        <th>Type</th>
                        <th>Reference</th>
                        <th>Description</th>
                        <th>Amount</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td>{receiptData ? receiptData.accountType : ""}</td>
                        <td></td>
                        <td></td>
                        <td>{receiptData ? receiptData.amount : ""}</td>
                      </tr>

                    </tbody>
                  </Table>
                </Container>
                <div className="d-flex">
                  <p className="ml-5"> {receiptData ? <AmountInWords amount={receiptData.amount} /> : null}</p>
                  <div
                    style={{
                      backgroundColor: "#488a99",
                      color: "white",
                      padding: "10px",
                      border: "1px solid #ccc",
                      borderRadius: "5px",
                      width: "20rem" /* Adjust width to fit content */,
                      height: "3.5rem",
                      // float: "right",
                      marginLeft: "30rem"
                    }}
                  >

                    <p style={{ paddingTop: "5px" }}>
                      <h5>Total Amount:    {receiptData ? receiptData.amount : ""}/-</h5>
                    </p>
                  </div>
                </div>
                <div className="ml-5 d-flex" style={{ marginTop: "5rem" }}>
                  <p style={{ marginRight: "10rem" }}>Remitter:</p>
                  <p style={{ marginRight: "10rem" }}>Clerk:</p>
                  <p style={{ marginRight: "10rem" }}>Manager:</p>
                  <p>Cashier:</p>
                </div>
              </div>

              <div style={{ border: "1px solid black" }}>
                <div
                  style={{
                    float: "right",
                    marginRight: "2rem",
                    marginTop: "10rem",
                  }}
                >
                  <p><b>Receipt ID:</b> {receiptData ? receiptData.rdsBill : ""}</p>
                  <p><b>Date:</b> {receiptData ? receiptData.date : ""}</p>

                </div>
                <div style={{ textAlign: "center", marginLeft: "5rem" }}>
                  <img
                    src="/mscs.png"
                    alt="logo"
                    style={{
                      maxWidth: "100%",
                      height: "auto",
                      marginLeft: "9rem",
                    }}
                  />
                  <h3 style={{ marginLeft: "9rem" }}>Recurring Deposit Special Receipt</h3>
                  <p style={{ marginLeft: "9rem" }}>Bank Copy</p>
                </div>
                <div className="ml-5">
                  <p><b>Received From:</b>   {receiptData ? receiptData.customerName : ""} </p>
                  <p><b>Address: </b>   {receiptData ? receiptData.address : ""} </p>
                  <p><b>Account Number: </b>    {receiptData ? receiptData.RDSNumber : ""}</p>
                </div>
                <Container>
                  <Table striped hover>
                    <thead>
                      <tr>
                        <td colSpan={4} style={{ textAlign: "center" }}>
                          <b>Deposit Information</b>
                        </td>
                      </tr>
                      <tr>
                        <th>Type</th>
                        <th>Reference</th>
                        <th>Description</th>
                        <th>Amount</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td>{receiptData ? receiptData.accountType : ""}</td>
                        <td></td>
                        <td></td>
                        <td>{receiptData ? receiptData.amount : ""}</td>
                      </tr>

                    </tbody>
                  </Table>
                </Container>
                <div className="d-flex">
                  <p className="ml-5"> {receiptData ? <AmountInWords amount={receiptData.amount} /> : null}</p>
                  <div
                    style={{
                      backgroundColor: "#488a99",
                      color: "white",
                      padding: "10px",
                      border: "1px solid #ccc",
                      borderRadius: "5px",
                      width: "20rem" /* Adjust width to fit content */,
                      height: "3.5rem",
                      // float: "right",
                      marginLeft: "30rem"
                    }}
                  >

                    <p style={{ paddingTop: "5px" }}>
                      <h5>Total Amount:    {receiptData ? receiptData.amount : ""}/-</h5>
                    </p>
                  </div>
                </div>
                <div className="ml-5 d-flex" style={{ marginTop: "5rem" }}>
                  <p style={{ marginRight: "10rem" }}>Remitter:</p>
                  <p style={{ marginRight: "10rem" }}>Clerk:</p>
                  <p style={{ marginRight: "10rem" }}>Manager:</p>
                  <p>Cashier:</p>
                </div>
              </div>
            </div>
          </Modal.Body>
          <Modal.Footer>
            <Button variant="secondary" onClick={handleClose}>
              Close
            </Button>
          </Modal.Footer>
        </div>
      </Modal>

      {/* RDS HISTORY modal */}
      <Modal
        show={showModalHisto}
        onHide={handleCloseModalHisto}
        dialogClassName="add-multi custom-modal-width"
      >
        <Modal.Body className="p-0">
          <div className="Member form">
            <div className="card mt-0">
              <div className=" justify-content-center">
                <div className="">
                  <div className="card mt-0">
                    <div className="card-header text-light">
                      <h4>RDS HISTORY</h4>
                    </div>
                    <div className="card-body">
                      <div className="row mb-3">
                        <div className="col-6">
                          <label htmlFor="referenceNumber">Search</label>
                          <input
                            type="text"
                            className="form-control"
                            id="branch"
                            name="branch"
                            // value={historyData.branch}
                            onChange={handleHistorysearch}
                            placeholder="Enter Search"
                          />
                        </div>
                      </div>
                      <center>
                        {/* <Table striped bordered hover>
                          <thead>
                            <tr>
                              <th>SL NO</th>
                              <th>RD NO</th>
                              <th>MEMBERSHIP ID</th>
                              <th>NAME</th>
                              <th>AMOUNT </th>
                              <th>MONTH</th>
                              <th>PAY DATE</th>
                              <th>BILL NO</th>
                              <th>ACCOUNT TYPE</th>
                            </tr>
                          </thead>
                          <tbody>
                            {historyData.map((item, index) => (
                              <tr key={index}>
                                <td>{index + 1}</td>
                                <td>{item.RDSNumber}</td>
                                <td>{item.membershipId}</td>
                                <td>{item.customerName}</td>
                                <td>{item.amount}</td>
                                <td>{item.month}</td>
                                <td>{item.payDate}</td>
                                <td>{item.billNo}</td>
                                <td>{item.accountType}</td>
                              </tr>
                            ))}
                          </tbody>
                        </Table> */}
                        <Table striped bordered hover>
                          <thead>
                            <tr>
                              <th>SL NO</th>
                              <th>RD NO</th>
                              <th>DATE</th>
                              <th>REFERENCE NAME</th>
                              <th>RDS BILL</th>
                              <th>NEW AMOUNT</th>
                              <th>TRANSACTION ID</th>
                            </tr>
                          </thead>
                          <tbody>
                            {historyData.map((item, index) => (
                              <tr key={item._id}>
                                <td>{index + 1}</td>
                                <td>{item.RDSNumber}</td>
                                <td>{item.date}</td>
                                <td>{item.referenceName}</td>
                                <td>{item.rdsBill}</td>
                                <td>{item.newAmount}</td>
                                <td>{item.transactionId}</td>
                              </tr>
                            ))}
                          </tbody>
                        </Table>
                        <div className="pagination-buttons">
                          <Button onClick={handlePreviousHistoryPage} disabled={currentHisPage === 1}><FontAwesomeIcon icon={faArrowLeft} /> Previous</Button>
                          <span>Page {currentHisPage}</span>
                          <Button onClick={handleNextHistoryPage} disabled={!nextHisPage}>Next <FontAwesomeIcon icon={faArrowRight} /></Button>
                          <select value={hisPageSize} onChange={handleHistoryPageSizeChange}>
                            <option value="10">10</option>
                            <option value="20">20</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                          </select>
                        </div>
                      </center>
                    </div>
                  </div>
                </div>
              </div>

              <div className="form ml-4 mt-1 mb-1">
                <Button
                  className=""
                  variant="danger"
                  onClick={handleCloseModalHisto}
                >
                  Close
                </Button>
              </div>
            </div>
          </div>
        </Modal.Body>
      </Modal>



    </div>
  )
}

export default Rds